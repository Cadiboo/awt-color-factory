import org.gradle.plugins.signing.Sign
import javax.swing.*

plugins {
    id 'idea'
    id 'maven-publish'
    id "com.github.ethankhall.semantic-versioning" version "1.1.0"
    id "com.github.hierynomus.license" version "0.14.0"
    id "com.jfrog.bintray" version "1.8.3"
    id "net.saliman.properties" version "1.4.6"
}

project.version.with {
    major = awtColorFactoryVersionMajor as int
    minor= awtColorFactoryVersionMinor as int
    patch = awtColorFactoryVersionPatch as int
    if (project.hasProperty('awtColorFactoryVersionLabel')) {
        preRelease = awtColorFactoryVersionLabel
    }
    releaseBuild = Boolean.valueOf(awtColorFactoryReleaseBuild)
}

if(hasProperty('javaCompatibility')) {
    ext.javaCompatibility = ext.javaCompatibility as int
} else {
    ext.javaCompatibility = 7
}
ext {
    awtColorFactoryVersion = project.version as String
    awtColorFactoryTag = Boolean.valueOf(awtColorFactoryReleaseBuild) ? "v$ext.awtColorFactoryVersion" : 'master'

    moduleName = 'org.beryx.awt.color'

    javaVersion = (System.properties['java.specification.version'] ?: 1.0) as double
    if (1.2 <= javaVersion && javaVersion < 2) {
        javaVersion = ((int) (10 * javaVersion)) % 10
    } else {
        javaVersion = (int) javaVersion
    }
    if (javaVersion < (javaCompatibility as int)) {
        throw new GradleException("Cannot generate java-$javaCompatibility compatible code using a java-$javaVersion compiler")
    }
}

def pomConfig = {
    url "https://github.com/beryx/awt-color-factory"
    developers {
        developer {
            id "siordache"
            name "Serban Iordache"
        }
    }
    scm {
        connection "https://github.com/beryx/awt-color-factory.git"
        developerConnection "https://github.com/beryx/awt-color-factory.git"
        url "https://github.com/beryx/awt-color-factory"
    }
}

apply plugin: 'signing'
repositories {
    jcenter()
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

apply plugin: 'java-library'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'com.github.hierynomus.license'

sourceCompatibility = 1.8
group = 'org.beryx'
version = awtColorFactoryVersion

def defaultEncoding = 'UTF-8'
[compileJava, compileTestJava]*.options*.encoding = defaultEncoding

license {
    header rootProject.file("license-header.txt")
    skipExistingHeaders true
    ignoreFailures false
}

signing {
    sign configurations.archives
}

signArchives {
    onlyIf { gradle.taskGraph.allTasks.findAll {task -> isPublishTask(task)} }
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.2.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.2.0'
}

jar {
    manifest {
        attributes 'Implementation-Title': "awt-color-factory",
                'Implementation-Version': awtColorFactoryVersion
    }
}
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: classes) {
    classifier "javadoc"
    from javadoc
}

artifacts {
    archives(sourcesJar, javadocJar)
}

afterEvaluate {
    javadoc {
        inputs.property("moduleName", moduleName)
        options.addBooleanOption('html5', true)
        doFirst {
            if(javaCompatibility >= 9) {
                options.addStringOption('-module-path', classpath.asPath)
            }
        }
    }

    compileJava {
        inputs.property("moduleName", moduleName)
        doFirst {
            sourceCompatibility = javaCompatibility
            targetCompatibility = javaCompatibility
            if(javaCompatibility <= 8) {
                sourceSets.main.java.exclude '**/module-info.java'
            } else {
                options.compilerArgs = [
                        '--module-path', classpath.asPath,
                ]
                classpath = files()
            }
        }
    }

    compileTestJava {
        inputs.property("moduleName", moduleName)
        doFirst {
            sourceCompatibility = javaCompatibility
            targetCompatibility = javaCompatibility
            if(javaCompatibility >= 9) {
                options.compilerArgs = [
                        '--module-path', classpath.asPath,
                        '--add-modules', 'org.junit.jupiter.api',
                        '--add-reads', "$moduleName=org.junit.jupiter.api",
                        '--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath,
                ]
                classpath = files()
            }
        }
    }

    test {
        inputs.property("moduleName", moduleName)
        doFirst {
            if(javaCompatibility >= 9) {
                jvmArgs = [
                        '--module-path', classpath.asPath,
                        '--add-modules', 'ALL-MODULE-PATH',
                        '--add-reads', "$moduleName=org.junit.jupiter.api",
                        '--patch-module', "$moduleName=" + files(sourceSets.test.java.outputDir).asPath,
                ]
                classpath = files()
            }
        }

        ignoreFailures = false

        useJUnitPlatform()

        testLogging {
            exceptionFormat = 'full'
            showStandardStreams = true
        }

        beforeTest { descriptor ->
            logger.lifecycle("Starting: $descriptor")
        }
        afterTest { descriptor ->
            logger.lifecycle("Finished: $descriptor")
        }
        outputs.upToDateWhen {false}
    }
}

task extractModuleInfoClass {
    doLast {
        copy {
            from zipTree(jar.archivePath)
            include "module-info.class"
            into "${buildDir}/mod-info-tmp"
        }
    }
}
task cleanClassesAndLibs {
    doLast {
        delete sourceSets.main.java.outputDir
        delete jar.archivePath
    }
}

task insertInfoClass() {
    doLast {
        jar {
            from file("$buildDir/mod-info-tmp/module-info.class")
        }.execute()
    }
}

task copyInfoClass() {
    doLast {
        copy {
            from "$buildDir/mod-info-tmp/module-info.class"
            into "$buildDir/classes/java/main"
        }
    }
}

afterEvaluate {
    task jarWithJava9(type: GradleBuild) {
        startParameter = gradle.startParameter.newBuild()
        startParameter.projectProperties.javaCompatibility = 9
        buildFile = './build.gradle'
        tasks = ['clean', 'jar']
    }
    task jarWithCompatibility(type: GradleBuild) {
        startParameter = gradle.startParameter.newBuild()
        startParameter.projectProperties.javaCompatibility = javaCompatibility
        buildFile = './build.gradle'
        tasks = ['cleanClassesAndLibs', 'jar']
    }
    task modularJar(dependsOn: [jarWithJava9, extractModuleInfoClass, jarWithCompatibility, insertInfoClass]) {
        group = 'build'
        description = "Assembles a java-8 compatible archive containing the main classes and a java-9 module-info.class"
        extractModuleInfoClass.mustRunAfter jarWithJava9
        jarWithCompatibility.mustRunAfter extractModuleInfoClass
        insertInfoClass.mustRunAfter jarWithCompatibility
    }

    task buildWithJava9(type: GradleBuild) {
        startParameter = gradle.startParameter.newBuild()
        startParameter.projectProperties.javaCompatibility = 9
        buildFile = './build.gradle'
        tasks = ['clean', 'build']
    }
    task buildWithCompatibility(type: GradleBuild) {
        startParameter = gradle.startParameter.newBuild()
        startParameter.projectProperties.javaCompatibility = javaCompatibility
        buildFile = './build.gradle'
        tasks = ['cleanClassesAndLibs', 'build']
    }
    task modularBuild(dependsOn: [buildWithJava9, extractModuleInfoClass, buildWithCompatibility, insertInfoClass]) {
        group = 'build'
        description = "Assembles and tests this project, creating a java-8 compatible jar that contains a java-9 module-info.class"
        extractModuleInfoClass.mustRunAfter buildWithJava9
        buildWithCompatibility.mustRunAfter extractModuleInfoClass
        insertInfoClass.mustRunAfter buildWithCompatibility
    }

    // Create and save the module-info.class files before running uploadArchives
    uploadArchives {
        dependsOn jarWithJava9, extractModuleInfoClass, cleanClassesAndLibs
        extractModuleInfoClass.mustRunAfter jarWithJava9
        cleanClassesAndLibs.mustRunAfter extractModuleInfoClass
    }
}

gradle.taskGraph.whenReady {taskGraph ->
    if (javaVersion < 9 && (taskGraph.hasTask(jarWithJava9) || taskGraph.hasTask(buildWithJava9))) {
        throw new GradleException("You need a java-9 or newer compiler to execute this task.")
    }
}


publishing {
    publications {
        "awt-color-factory"(MavenPublication) {
            from components.java
            artifact sourcesJar { classifier "sources" }
            artifact javadocJar { classifier "javadoc" }
            groupId 'org.beryx'
            artifactId project.name
            version awtColorFactoryVersion
            pom.withXml {
                def root = asNode()
                root.appendNode('name', "Module $project.name")
                root.appendNode('description', "The $project.name artifact")
                root.children().last() + pomConfig

                // We cannot configure the licenses in pomConfig due to a name conflict with the 'license' extension defined by the com.github.hierynomus.license plugin
                def licenseNode = root.appendNode('licenses').appendNode('license')
                licenseNode.appendNode('name', 'GNU General Public License, version 2, with the Classpath Exception')
                licenseNode.appendNode('url', 'https://openjdk.java.net/legal/gplv2+ce.html')
                licenseNode.appendNode('distribution', 'repo')
            }
        }
    }
}

def readPasswordFromConsole(title, prompt) {
    JPanel panel = new JPanel()
    JLabel label = new JLabel(prompt)
    JPasswordField pass = new JPasswordField(24)
    panel.add(label)
    panel.add(pass)
    def options = ["OK", "Cancel"] as Object[]
    int option = JOptionPane.showOptionDialog(null, panel, title,
            JOptionPane.NO_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, null)
    if(option != 0) throw new InvalidUserDataException("Operation cancelled by the user.")
    new String(pass.password)
}

def isPublishTask(task) {
    task.name.startsWith('publish')
}

gradle.taskGraph.whenReady { taskGraph ->
    if (gradle.taskGraph.allTasks.findAll {task -> isPublishTask(task)}) {
        if(!project.hasProperty('signingKeyId') || !project.hasProperty('signingSecretKeyRingFile'))
            throw new InvalidUserDataException("Please configure your signing credentials in gradle-local.properties.")
        def password = readPasswordFromConsole('Please enter your PGP credentials:', 'PGP Private Key Password')
        allprojects { ext."signing.keyId" = signingKeyId }
        allprojects { ext."signing.secretKeyRingFile" = signingSecretKeyRingFile }
        allprojects { ext."signing.password" = password }
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.getProperty('bintrayUser') : "unknownUser"
    key =  project.hasProperty('bintrayKey') ? project.getProperty('bintrayKey') : "unknownKey"
    publications = ['awt-color-factory']
    pkg {
        repo = 'maven'
        name = 'awt-color-factory'
        userOrg = 'beryx'
        licenses = ['GPL-2.0+CE']
        vcsUrl = 'https://github.com/beryx/awt-color-factory.git'

        version {
                name = awtColorFactoryVersion
                desc = "AWT Color Factory $awtColorFactoryVersion"
                released  = new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZZ")
                vcsTag = awtColorFactoryVersion
                gpg {
                    sign = true
                }
        }
    }
}
